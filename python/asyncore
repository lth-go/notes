asyncore.loop([timeout[, use_poll[, map[, count]]]]):
    进入轮询循环直到所有打开的通道已被关闭或计数通过


asyncore.dispatcher:
    1.handle_read()：Called when the asynchronous loop detects that a read() call on the channel’s socket will succeed.

    当socket有可读的数据的时候执行这个方法，可读的数据的判定条件就是看方法readable()返回为True还是False。即readable()返回为True的时候执行该方法。

    2.handle_write()：Called when the asynchronous loop detects that a writable socket can be written.

    当socket有可写的数据的时候执行这个方法，可写的数据的判定条件就是看方法writable()返回为True还是False。即writable()返回为True的时候执行该方法。

    3.handle_expt()：Called when there is out of band (OOB) data for a socket connection.

    当socket通信过程中出现OOB异常的时候执行该方法。

    4.handle_connect()：Called when the active opener’s socket actually makes a connection.

    当有客户端连接的时候，执行该方法进行处理。

    5.handle_close()：Called when the socket is closed.

    可连接关闭的时候执行该方法。

    6.handle_error()：Called when an exception is raised and not otherwise handled.

    当通信过程中出现异常并且没有在其他的地方进行处理的时候执行该方法。

    7.handle_accept()：Called on listening channels (passive openers) when a connection can be established with a new remote endpoint that has issued a connect() call for the local endpoint.

    当作为server socket监听的时候，有客户端连接的时候，利用这个方法进行处理。

    8.readable()：Called each time around the asynchronous loop to determine whether a channel’s socket should be added to the list on which read events can occur.

    缓冲区是否有可读数据。

    9.writable()：Called each time around the asynchronous loop to determine whether a channel’s socket should be added to the list on which write events can occur.

    缓冲区是否有可写数据。

    二、syncore.dispatcher可以使用的方法

    1.create_socket(family, type)：创建一个socket连接。

    2.connect(address)：连接一个socket server。

    3.send(data)：发送数据。

    4.recv(buffer_size)：收取数据到内存缓冲中。

    5.listen(backlog)：server socket开始监听。

    6.bind(address)：server socket绑定某个地址和端口。

    7.accept()：当有客户端连接的时候，执行该方法接受客户端连接。

    8.close()：关闭socket。
    



asyncore.dispatcher_with_send：
    dispatcher的子类，增加了简单的缓冲输出，对于简单的客户端有用。详细资料参考：asynchat.async_chat。

asyncore.file_dispatcher：
    封装了文件描述符或文件对象及映射参数(可选)供poll()和loop()函数使用的文件分发器。它提供了文件对象或其他具备fileno()方法的对象，调用fileno()并传递到file_wrapper构造函数。可用于UNIX。

asyncore.file_wrapper：
    接收整数文件描述符并调用os.dup()复制句柄，这样原句柄可以关闭，而文件包装器不受影响。该类封装了大量方法以模拟socket给file_dispatcher类使用。可用于UNIX。

